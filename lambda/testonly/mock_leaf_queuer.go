// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package testonly is a generated GoMock package.
package testonly

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	trillian "github.com/google/trillian"
	reflect "reflect"
)

// MockLeafQueuer is a mock of LeafQueuer interface
type MockLeafQueuer struct {
	ctrl     *gomock.Controller
	recorder *MockLeafQueuerMockRecorder
}

// MockLeafQueuerMockRecorder is the mock recorder for MockLeafQueuer
type MockLeafQueuerMockRecorder struct {
	mock *MockLeafQueuer
}

// NewMockLeafQueuer creates a new mock instance
func NewMockLeafQueuer(ctrl *gomock.Controller) *MockLeafQueuer {
	mock := &MockLeafQueuer{ctrl: ctrl}
	mock.recorder = &MockLeafQueuerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLeafQueuer) EXPECT() *MockLeafQueuerMockRecorder {
	return m.recorder
}

// QueueLeaves mocks base method
func (m *MockLeafQueuer) QueueLeaves(arg0 context.Context, arg1 *trillian.QueueLeavesRequest) (*trillian.QueueLeavesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueLeaves", arg0, arg1)
	ret0, _ := ret[0].(*trillian.QueueLeavesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueLeaves indicates an expected call of QueueLeaves
func (mr *MockLeafQueuerMockRecorder) QueueLeaves(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueLeaves", reflect.TypeOf((*MockLeafQueuer)(nil).QueueLeaves), arg0, arg1)
}
